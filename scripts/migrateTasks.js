import { initializeApp, cert } from 'firebase-admin/app';
import { getFirestore } from 'firebase-admin/firestore';
import { readFile } from 'fs/promises';

// Lire le fichier de configuration
const serviceAccount = JSON.parse(
  await readFile(new URL('../service-Account.json', import.meta.url))
);

// Initialiser Firebase Admin
initializeApp({
  credential: cert(serviceAccount)
});

const db = getFirestore();

const SUPER_ADMIN_STORE_ID = 'tu95hxcs81g8nkClJ6xsB1irJZr2'; // ID du store du super admin

async function migrateTasks() {
  try {
    console.log('D√©marrage de la migration des t√¢ches...');
    
    // 1. R√©cup√©rer toutes les t√¢ches de la collection globale
    console.log('R√©cup√©ration des t√¢ches existantes...');
    const tasksSnapshot = await db.collection('tasks').get();
    const tasks = tasksSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    console.log(`Trouv√© ${tasks.length} t√¢ches √† migrer`);

    // Statistiques de migration
    const stats = {
      total: tasks.length,
      success: 0,
      failed: 0,
      skipped: 0
    };

    // 2. V√©rifier si les t√¢ches existent d√©j√† dans la sous-collection
    console.log(`\nV√©rification de la sous-collection du super admin (${SUPER_ADMIN_STORE_ID})`);
    const existingTasksSnapshot = await db
      .collection(`stores/${SUPER_ADMIN_STORE_ID}/tasks`)
      .get();

    if (!existingTasksSnapshot.empty) {
      console.log(`‚ö†Ô∏è ${existingTasksSnapshot.size} t√¢ches d√©j√† pr√©sentes dans la sous-collection`);
      console.log('Migration annul√©e pour √©viter les doublons');
      return;
    }

    // 3. Migrer les t√¢ches par lots de 500 (limite de Firestore)
    const batchSize = 500;
    let batch = db.batch();
    let operationCount = 0;

    for (const task of tasks) {
      try {
        // V√©rifier les donn√©es requises
        if (!task.title) {
          console.warn(`‚ö†Ô∏è T√¢che ${task.id} ignor√©e: titre manquant`);
          stats.skipped++;
          continue;
        }

        // Normaliser les donn√©es de la t√¢che
        const normalizedTask = {
          title: task.title,
          description: task.description || '',
          status: task.status || 'pending',
          priority: task.priority || 'normal',
          assignedTo: task.assignedTo || null,
          dueDate: task.dueDate || null,
          storeId: SUPER_ADMIN_STORE_ID,
          createdAt: task.createdAt || new Date(),
          updatedAt: task.updatedAt || new Date(),
          migratedAt: new Date()
        };

        const newTaskRef = db
          .collection(`stores/${SUPER_ADMIN_STORE_ID}/tasks`)
          .doc(task.id);

        batch.set(newTaskRef, normalizedTask);

        operationCount++;
        stats.success++;

        // Commiter le batch quand il atteint la limite
        if (operationCount === batchSize) {
          await batch.commit();
          console.log(`‚úÖ Lot de ${operationCount} t√¢ches migr√© avec succ√®s`);
          batch = db.batch();
          operationCount = 0;
        }
      } catch (error) {
        console.error(`‚ùå √âchec de migration pour la t√¢che ${task.id}:`, error.message);
        stats.failed++;
      }
    }

    // Commiter le dernier batch s'il reste des op√©rations
    if (operationCount > 0) {
      await batch.commit();
      console.log(`‚úÖ Dernier lot de ${operationCount} t√¢ches migr√© avec succ√®s`);
    }

    // Afficher les statistiques finales
    console.log('\nüìä Statistiques de Migration:');
    console.log('Total des t√¢ches:', stats.total);
    console.log('R√©ussis:', stats.success);
    console.log('√âchou√©s:', stats.failed);
    console.log('Ignor√©s:', stats.skipped);

    if (stats.failed === 0 && stats.skipped === 0) {
      console.log('\nMigration termin√©e avec succ√®s!');
    } else {
      console.log('\nMigration termin√©e avec des avertissements.');
    }
  } catch (error) {
    console.error('Erreur lors de la migration:', error);
    throw error;
  }
}

// Ex√©cuter la migration
try {
  await migrateTasks();
  console.log('Script de migration termin√©');
} catch (error) {
  console.error('Erreur lors de l\'ex√©cution du script:', error);
  process.exit(1);
}
